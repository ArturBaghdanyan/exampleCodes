fetch.API with typescript..

export interface IProduct {
    userId: number,
    id: number,
    title: string,
    body: string
};

import React, { useEffect, useState } from "react";
 const [count,setCount] = useState([]);

    useEffect(() => {
        fetch('https://jsonplaceholder.typicode.com/posts')
            .then(response => response.json())
            .then((data) => setCount(data))
        console.log("res")
    }, []);

    return (
        <div>
            {count.map(({userId, title}: IProduct) => {
                return (
                    <div>
                        <p>{userId}</p>
                        <p>{title}</p>
                    </div>
                    )
            })}
	)...


map with typescript...

import {IProduct} from "../interfaces";

export const products: IProduct[] = [
        {
            "userId": 1,
            "id": 1,
            "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
            "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
        },
        {
            "userId": 1,
            "id": 2,
            "title": "qui est esse",
            "body": "est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla"
        },
        {
            "userId": 1,
            "id": 3,
            "title": "ea molestias quasi exercitationem repellat qui ipsa sit aut",
            "body": "et iusto sed quo iure\nvoluptatem occaecati omnis eligendi aut ad\nvoluptatem doloribus vel accusantium quis pariatur\nmolestiae porro eius odio et labore et velit aut"
        }
    ]..

export interface IProduct {
    userId: number,
    id: number,
    title: string,
    body: string
}..

import {products} from "./components/Product"
import {IProduct} from "./interfaces";

 {products.map(({userId, id, title}: IProduct) => {
                return (
                    <ul>
                        <li>{userId}</li>
                        <li>{id}</li>
                        <li>{title}</li>
                    </ul>
                    )
            })}

Example 1...
images fetch api with typescript...

import React, { useState} from "react";
import {Image} from "./TypeImage";

export interface Image {
    "albumId": number,
    "id": number,
    "title": string,
    "url": string,
    "thumbnailUrl": string
}


function ProcessImage() {
    const [imageData,setImageData] = useState<Image[]>([]);

    const fetchPost = async () => {
        const response = await fetch("https://jsonplaceholder.typicode.com/photos")
        const data = await response.json();
        console.log(data[0])
        setImageData(data)
    };

    return (
        <div>
            <button onClick={fetchPost}>show</button>
            
            {imageData.map((pro,index) => {
                if(index < 3) {
                    return (
                        <div key={pro.id}>
                            <img src={pro.url} alt=""/>
                            <p>{pro.title}</p>
                        </div>
                    )
                }
            })}
        </div>
    )
}
export default ProcessImage;

Example 2....for first element

import React, { useState} from "react";
import {Image} from "./TypeImage";

export interface Image {
    "albumId": number,
    "id": number,
    "title": string,
    "url": string,
    "thumbnailUrl": string
}

function ProcessImage() {
    const [imageData,setImageData] = useState<Image[]>([]);

    const fetchPost = async () => {
        const response = await fetch("https://jsonplaceholder.typicode.com/photos")
        const data = await response.json();
        console.log(data[0])
        setImageData(data)
    };

    const element = imageData[0]

    return (
        <div className="image">
            <button onClick={fetchPost}>show</button>
            <div key={element?.id}>
                <img src={element?.url} alt=""/>
                <p>{element?.title}</p>
            </div>
            
        </div>
    )
}
export default ProcessImage;

Example 3.....

export interface Image {
    "albumId": number,
    "id": number,
    "title": string,
    "url": string,
    "thumbnailUrl": string
}

export const Imagesec = () => {
    const [icon,setIcon] = useState<Image[]>([]);

       const post = () => {
           fetch("https://jsonplaceholder.typicode.com/photos")
               .then(response => response.json())
               .then(data => setIcon(data))
       }

    return (
        <div>
            <button onClick={post}>add</button>
            {icon.map((item: Image) => {
                    return (
                        <div key={item.id}>
                            <img src={item.url} alt=""/>
                        </div>
                    )
                })}

        </div>
    )
}

GET...

export function HandleClickGET() {

 const [state, setState] = useState<IData[]>([]);

    async function handle() {
        const response = await axios.get("https://jsonplaceholder.typicode.com/posts")
        console.log("GET", response.data)
        setState(state)
    }

 return (
         <div>
           <button onClick={handle}>GET</button>
         </div>
        )
}

POST...

const handleClickPOST = async () => {
            const url = 'https://jsonplaceholder.typicode.com/posts';
            const body = {
                title: "123",
                userId: 1,
                body: "aaa"
            };

            const response = await axios.post(url, body);
            console.log('POST:', response.data);
        };

        return (
            <div>
                <button onClick={handleClickPOST}>post</button>
            </div>
        )
